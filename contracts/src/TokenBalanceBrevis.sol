// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@openzeppelin/contracts/access/Ownable.sol";
import "./lib/BrevisApp.sol";

// Accept both ZK- and OP-attested results.
contract TokenBalance is BrevisApp, Ownable {
    event TokenBalanceAttested(
        address accountA,
        address accountB,
        uint64 blockNum,
        uint256 balanceA,
        uint256 balanceB
    );

    bytes32 public vkHash;

    constructor(
        address _brevisRequest
    ) BrevisApp(_brevisRequest) Ownable(msg.sender) {}

    // BrevisRequest contract will trigger callback once ZK proof is received.
    function handleProofResult(
        bytes32 _vkHash,
        bytes calldata _circuitOutput
    ) internal override {
        // We need to check if the verifying key that Brevis used to verify the proof generated by our circuit is indeed
        // our designated verifying key. This proves that the _circuitOutput is authentic
        require(vkHash == _vkHash, "invalid vk");
        (
            address accountA,
            address accountB,
            uint64 blockNum,
            uint256 balanceA,
            uint256 balanceB
        ) = decodeOutput(_circuitOutput);
        emit TokenBalanceAttested(
            accountA,
            accountB,
            blockNum,
            balanceA,
            balanceB
        );
    }

    // handle optimistic proof result.
    // This example handles optimistic result in the same way as handling zk results,
    // your app can choose to do differently.
    function handleOpProofResult(
        bytes32 _vkHash,
        bytes calldata _circuitOutput
    ) internal override {
        handleProofResult(_vkHash, _circuitOutput);
    }

    // In app circuit we have:
    // api.OutputAddress(tx.From)
    // api.OutputUint(64, tx.BlockNum)
    function decodeOutput(
        bytes calldata o
    ) internal returns (address, address, uint64, uint256, uint256) {
        return (address(this), address(this), uint64(block.number), 0, 0);
    }

    // vkHash represents the unique circuit app logic
    function setVkHash(bytes32 _vkHash) external onlyOwner {
        vkHash = _vkHash;
    }

    /**
     * @notice config params to handle optimitic proof result
     * @param _challengeWindow The challenge window to accept optimistic result. 0: POS, maxInt: disable optimistic result
     * @param _sigOption bitmap to express expected sigs: bit 0 is bvn, bit 1 is avs
     */
    function setBrevisOpConfig(
        uint64 _challengeWindow,
        uint8 _sigOption
    ) external onlyOwner {
        brevisOpConfig = BrevisOpConfig(_challengeWindow, _sigOption);
    }
}
